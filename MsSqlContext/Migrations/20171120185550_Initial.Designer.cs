// <auto-generated />
using Infrastructure.DataModel.Events;
using Infrastructure.DataModel.MapperEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using MsSqlContext;
using System;

namespace MsSqlContext.Migrations
{
    [DbContext(typeof(MsSqlDataContext))]
    [Migration("20171120185550_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastructure.DataModel.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Budget");

                    b.Property<string>("Description");

                    b.Property<DateTime>("End");

                    b.Property<int>("HostId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Events.ServiceAgreement", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("ServiceSlotId");

                    b.Property<string>("Comment");

                    b.Property<int>("Cost");

                    b.Property<DateTime>("End");

                    b.Property<int>("EventServiceModelId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("State");

                    b.HasKey("EventId", "ServiceSlotId");

                    b.HasIndex("EventServiceModelId");

                    b.HasIndex("ServiceSlotId", "EventId")
                        .IsUnique();

                    b.ToTable("ServiceAgreements");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Events.ServiceSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<decimal?>("BudgetTarget");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("TypeId");

                    b.HasKey("Id", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeId");

                    b.ToTable("ServiceSlots");
                });

            modelBuilder.Entity("Infrastructure.DataModel.MapperEntities.AttendeeRelationship", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("PersonId");

                    b.Property<int>("Type");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("AttendeeRelationships");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Misc.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Infrastructure.DataModel.People.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<byte[]>("ProfilePicture");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EMail");

                    b.Property<string>("Password");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTime?>("RefreshTokenExpiration");

                    b.Property<string>("ResetHash");

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Security.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Issuer");

                    b.Property<string>("OriginalIssuer");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<int>("User_Id");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<string>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Service.EventServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<int>("PersonId");

                    b.Property<string>("Profile");

                    b.Property<decimal>("Salary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("EventService");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Service.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAgreementAttribute", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("ServiceAgreementAttributeSpecificationId");

                    b.Property<int>("ServiceSlotId");

                    b.Property<int>("ServiceTypeId");

                    b.Property<string>("Value");

                    b.HasKey("EventId", "ServiceAgreementAttributeSpecificationId", "ServiceSlotId", "ServiceTypeId");

                    b.HasIndex("EventId", "ServiceSlotId");

                    b.HasIndex("ServiceAgreementAttributeSpecificationId", "ServiceTypeId");

                    b.ToTable("ServiceAgreementAttributes");
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAttribute", b =>
                {
                    b.Property<int>("EventServiceModelId");

                    b.Property<int>("ServiceTypeId");

                    b.Property<int>("ServiceAttributeSpecificationId");

                    b.Property<string>("Value");

                    b.HasKey("EventServiceModelId", "ServiceTypeId", "ServiceAttributeSpecificationId");

                    b.HasIndex("ServiceAttributeSpecificationId", "ServiceTypeId");

                    b.ToTable("ServiceAttributes");
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecificationBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceTypeId");

                    b.Property<string>("AttributeType");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceAttributeSpecificationBases");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ServiceAttributeSpecificationBase");
                });

            modelBuilder.Entity("Infrastructure.DataModel.People.RealPerson", b =>
                {
                    b.HasBaseType("Infrastructure.DataModel.People.Person");

                    b.Property<int>("UserId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("RealPerson");

                    b.HasDiscriminator().HasValue("RealPerson");
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAgreementAttributeSpecification", b =>
                {
                    b.HasBaseType("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecificationBase");


                    b.ToTable("ServiceAgreementAttributeSpecification");

                    b.HasDiscriminator().HasValue("ServiceAgreementAttributeSpecification");
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecification", b =>
                {
                    b.HasBaseType("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecificationBase");


                    b.ToTable("ServiceAttributeSpecification");

                    b.HasDiscriminator().HasValue("ServiceAttributeSpecification");
                });

            modelBuilder.Entity("Infrastructure.DataModel.Events.Event", b =>
                {
                    b.HasOne("Infrastructure.DataModel.People.RealPerson", "Host")
                        .WithMany("HostedEvents")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.DataModel.Misc.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataModel.Events.ServiceAgreement", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Service.EventServiceModel", "EventServiceModel")
                        .WithMany()
                        .HasForeignKey("EventServiceModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.DataModel.Events.ServiceSlot", "ServiceSlot")
                        .WithOne()
                        .HasForeignKey("Infrastructure.DataModel.Events.ServiceAgreement", "ServiceSlotId", "EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Infrastructure.DataModel.Events.ServiceSlot", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Events.Event", "Event")
                        .WithMany("EventServiceSlots")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.DataModel.Service.ServiceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Infrastructure.DataModel.MapperEntities.AttendeeRelationship", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Events.Event", "Event")
                        .WithMany("AttendeeRelationships")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.DataModel.People.Person", "Person")
                        .WithMany("EventPersonRelationships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataModel.Security.UserClaim", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Security.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataModel.Service.EventServiceModel", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Misc.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.DataModel.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.DataModel.Service.ServiceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAgreementAttribute", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Events.ServiceAgreement", "ServiceAgreement")
                        .WithMany()
                        .HasForeignKey("EventId", "ServiceSlotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.DataModel.ServiceAttributes.ServiceAgreementAttributeSpecification", "ServiceAttributeSpecification")
                        .WithMany()
                        .HasForeignKey("ServiceAgreementAttributeSpecificationId", "ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAttribute", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Service.EventServiceModel", "EventServiceModel")
                        .WithMany()
                        .HasForeignKey("EventServiceModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecification", "ServiceAttributeSpecification")
                        .WithMany()
                        .HasForeignKey("ServiceAttributeSpecificationId", "ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Infrastructure.DataModel.ServiceAttributes.ServiceAttributeSpecificationBase", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Service.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataModel.People.RealPerson", b =>
                {
                    b.HasOne("Infrastructure.DataModel.Security.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("Infrastructure.DataModel.People.RealPerson", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
